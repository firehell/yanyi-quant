---
description: 需求文档
globs: 
alwaysApply: false
---
好的，以下是结合您最新反馈后的完整详细需求文档，使用 Markdown 格式呈现：

# 基于 Polygon 数据的美股日内交易辅助系统需求文档

## 1. 项目概述

### 1.1 项目名称

基于 Polygon 数据的美股日内交易辅助系统 (Day Trading Assistant)

### 1.2 项目目标

利用历史和实时美股数据，结合技术分析和 AI 模型，辅助用户进行日内交易决策，筛选潜力股票，提高交易胜率和盈利能力。

### 1.3 项目定位

*   **辅助交易：** 系统不直接进行自动交易，而是为用户提供买卖点建议、股票筛选等辅助信息，最终决策权仍由用户掌握。
*   **日内交易：** 交易策略主要针对日内（当天开仓平仓），持仓时间较短。
*   **低频交易：** 每天交易次数较少（例如：3 笔左右），注重交易质量而非数量。
*   **人机结合：** 强调技术分析、AI 模型与用户经验的结合，系统提供建议，用户进行最终判断和操作。

## 2. 数据需求

### 2.1 历史数据 (已具备)

*   **数据源:** Polygon S3 文件 (美股分钟级数据)
*   **时间范围:** 5 年
*   **数据格式:** CSV (假定, 或Parquet需要确认)
*   **存储:** MySQL 数据库 (使用 Navicat 管理)
*   **数据字段:** (请提供详细字段列表，例如：)
    *   `timestamp` (时间戳，精确到分钟)
    *   `open` (开盘价)
    *   `high` (最高价)
    *   `low` (最低价)
    *   `close` (收盘价)
    *   `volume` (成交量)
    *   `symbol` (股票代码)
    *   `vwap` (成交量加权平均价) *如有*
    *   `...` (其他字段)
*   **数据清洗:**
    *   **缺失值处理：**
        *   如果某一分钟数据缺失，使用前一分钟的数据进行填充。
        *   如果连续缺失超过 *N* 分钟（例如：5分钟），则删除该交易日的该股票数据（可选，根据实际情况确定）。
    *   **异常值处理：**
        *   价格波动超过 *X*%（例如：5%）视为异常值，删除该条记录。
        *   成交量超过过去 *M* 分钟平均成交量的 *Y* 倍（例如：10倍）视为异常值，删除该条记录。
        *   (X, Y, M, N 的具体数值需要根据数据分析确定)
    *   **数据一致性检查：**
        *   确保同一支股票在不同日期的交易时段一致（例如：都是 9:30 - 16:00）。
        *   检查是否存在重复的时间戳。

### 2.2 实时数据

*   **数据源:** Polygon REST API 和 WebSocket
*   **数据类型:**
    *   **行情数据:** 股票报价 (bid/ask)、成交量、成交价、涨跌幅、最高价、最低价等。
    *   **交易数据:** 逐笔成交信息 (trade data)。
    *   **(可选) 新闻数据:** 如果需要根据新闻事件进行交易，需要考虑接入新闻数据源（例如：Benzinga, Seeking Alpha 等）。
*   **数据频率:**
    *   **WebSocket:** 尽可能低的延迟，实时接收。
    *   **REST API:** 用于补充 WebSocket 可能出现的断连情况，以及获取一些不经常变动的数据（例如：股票基本信息、历史数据）。
*   **数据处理:**
    *   **数据过滤:** 筛选出需要关注的股票（例如：基于用户自定义的股票池、交易策略、AI 模型预测结果等）。
    *   **数据聚合:** 将实时行情数据聚合为分钟级别或其他自定义时间级别的数据，用于技术分析。
    *   **数据校验:** 检查实时数据是否完整、准确，是否存在延迟。

## 3. 功能需求

### 3.1 技术分析模块

*   **3.1.1 指标计算**
    *   **常用指标:**
        *   MA (移动平均线): 支持不同周期 (例如：5, 10, 20, 50, 200)
        *   EMA (指数移动平均线): 支持不同周期 (例如：12, 26)
        *   MACD: 支持自定义快线、慢线、信号线周期
        *   RSI: 支持不同周期 (例如：6, 12, 24)
        *   KDJ: 支持不同周期 (例如：9, 3, 3)
        *   BOLL (布林带): 支持自定义周期和标准差倍数
        *   ATR (平均真实波幅)
        *   OBV (能量潮)
        *   ... (其他常用指标)
    *   **自定义指标:**
        *   提供接口，允许用户使用 Python 或 Go 编写自定义指标的计算逻辑。
        *   自定义指标可以访问历史数据和实时数据。
    *   **指标参数:**
        *   所有指标的参数都可以在用户界面上进行灵活配置。

*   **3.1.2 信号生成**
    *   **基于指标的信号:**
        *   指标值超过/低于某个阈值。
        *   指标金叉/死叉。
        *   指标与价格的背离。
        *   ... (其他基于指标的信号)
    *   **形态识别:**
        *   **K线形态:** 锤头线、吊颈线、吞没形态、早晨之星、黄昏之星、十字星、T字线、倒T字线等。
        *   **图表形态:** 头肩顶、头肩底、双顶、双底、三角形（上升、下降、对称）、旗形、楔形等。
        *   允许用户自定义需要识别的形态及其参数。
    *   **信号组合:**
        *   允许用户将多个指标信号、形态信号进行组合，形成更复杂的交易策略。
        *   支持逻辑运算符 (AND, OR, NOT)。
    *   **信号过滤:**
        *   允许用户设置过滤条件，例如：只在特定时间段内触发信号、只在成交量放大时触发信号等。

### 3.2 AI 模型模块

*   **3.2.1 模型选择**
    *   **候选模型:**
        *   LSTM (长短期记忆网络)
        *   Transformer
        *   GRU (门控循环单元)
        *   随机森林
        *   XGBoost
        *   ... (其他适合时间序列预测的模型)
    *   **模型对比:**
        *   支持同时训练和评估多个模型，方便用户进行对比和选择。

*   **3.2.2 特征工程**
    *   **基础特征:**
        *   历史价格数据 (开盘价、最高价、最低价、收盘价、涨跌幅)
        *   成交量数据 (成交量、成交额)
        *   技术指标值
        *   时间特征 (例如：分钟数、小时数、星期几、是否节假日等)
    *   **衍生特征:**
        *   价格变化率、波动率
        *   成交量变化率、量比
        *   指标的差分、比率
        *   ... (其他衍生特征)
    *   **特征选择:**
        *   使用相关性分析、特征重要性评估等方法，去除冗余特征，提高模型效率和准确性。

*   **3.2.3 模型训练**
    *   **数据划分:**
        *   将历史数据划分为训练集、验证集和测试集。
        *   支持不同的划分方式（例如：按时间顺序划分、随机划分）。
    *   **训练流程:**
        *   使用训练集数据训练模型。
        *   使用验证集数据进行模型调优（例如：调整超参数）。
        *   使用测试集数据评估模型的最终性能。
    *   **模型评估:**
        *   **回归指标:** RMSE, MAE, R-squared 等 (用于预测价格)
        *   **分类指标:** Accuracy, Precision, Recall, F1-score, AUC 等 (用于预测涨跌)
        *   **自定义指标:** 允许用户定义自己的评估指标。
    *   **模型调优:**
        *   支持手动调参和自动调参（例如：网格搜索、贝叶斯优化）。

*   **3.2.4 模型预测**
    *   **输出:**
        *   **概率/评分:** 预测未来一段时间内上涨/下跌的概率，或上涨/下跌幅度的评分。
        *   **置信度:** 模型预测的可信程度。
        *   **特征重要性:** 哪些特征对模型预测结果影响最大。
    *   **预测频率:**
        *   可以根据用户需求，设置不同的预测频率（例如：每分钟预测一次、每5分钟预测一次）。
    *   **模型更新:**
        *   支持定期（例如：每天、每周）使用最新的历史数据重新训练模型。
        *   支持增量训练（在原有模型的基础上，使用新数据进行微调）。

*   **3.2.5 股票筛选**
    *   **预设策略:**
        *   **突破策略:** 筛选出价格突破关键阻力位/支撑位的股票。
        *   **趋势策略:** 筛选出处于上升趋势/下降趋势的股票。
        *   **反转策略:** 筛选出可能发生趋势反转的股票。
        *   **动量策略:** 筛选出近期涨幅较大/跌幅较大的股票。
        *   **... (其他常用策略)**
    *   **自定义筛选:**
        *   允许用户根据自己的需求，组合各种条件进行股票筛选。
        *   **条件类型:**
            *   技术指标 (例如：MA, MACD, RSI 等)
            *   AI 模型预测结果 (例如：上涨概率 > 0.8)
            *   基本面指标 (例如：市盈率 < 20, 市净率 < 3) *需要额外数据源*
            *   价格/成交量 (例如：涨幅 > 5%, 成交量 > 100万股)
            *   ... (其他条件)
        *   **逻辑运算符:** 支持 AND, OR, NOT。
    *   **实时更新:**
        *   股票筛选结果可以根据实时行情数据自动更新。

### 3.3 交易执行模块 (辅助模式)

*   **3.3.1 模拟交易**
    *   提供模拟交易环境，用于策略回测和验证。
    *   模拟交易环境应尽可能接近真实交易环境（例如：考虑交易费用、滑点等）。
*   **3.3.2 订单管理 (仅模拟)**
    *   跟踪模拟订单的状态 (例如：已提交、部分成交、已成交、已撤销等)。
    *   处理模拟订单的异常情况。
*   **3.3.3 风险控制 (仅模拟)**
    *   设置止损/止盈。
    *   仓位控制。
    *   最大回撤控制。
*   **3.3.4 交易记录**
    *   记录模拟交易和真实交易的详细信息。
    *   生成交易报告。
*   **3.3.5 交易信号推送**
    *   当系统检测到符合用户设定条件的交易机会时，通过以下方式通知用户：
        *   **界面弹窗:** 在用户界面上弹出提示窗口。
        *   **声音提示:** 播放提示音。
        *   **消息推送:** 通过邮件、短信、微信等方式发送通知 (可选)。
    *   用户可以自定义推送方式和触发条件。

### 3.4 系统监控模块

*   **3.4.1 数据监控**
    *   监控 Polygon 数据源的连接状态 (WebSocket 和 REST API)。
    *   监控数据延迟。
    *   监控数据质量 (完整性、准确性)。
*   **3.4.2 模型监控**
    *   监控模型的预测准确率、稳定性。
    *   监控模型输出的置信度分布。
*   **3.4.3 交易监控 (模拟)**
    *   监控模拟交易接口的连接状态。
    *   监控模拟订单的执行情况。
    *   监控模拟账户的资金变化。
*   **3.4.4 异常报警**
    *   当出现以下异常情况时，及时通过邮件、短信等方式通知用户：
        *   数据源连接中断。
        *   数据延迟过高。
        *   数据质量异常。
        *   模型预测准确率大幅下降。
        *   模拟交易出现异常。
        *   ... (其他异常情况)

### 3.5 用户界面

*   **3.5.1 实时行情展示**
    *   以图表形式展示股票的实时价格、成交量、涨跌幅等信息。
    *   支持多种图表类型 (例如：K 线图、分时图、成交量柱状图)。
    *   支持自定义时间周期 (例如：1 分钟、5 分钟、15 分钟、30 分钟、60 分钟、日线)。
    *   支持画线工具 (例如：趋势线、水平线、斐波那契回调线)。
    *   支持添加技术指标。
    *   支持全屏显示。

*   **3.5.2 技术指标展示**
    *   在图表上叠加显示各种技术指标。
    *   允许用户选择要显示的指标。
    *   允许用户自定义指标的参数。
    *   支持指标的颜色、线型等样式的自定义。

*   **3.5.3 交易信号展示**
    *   在图表上标记买入/卖出信号 (例如：用箭头或不同颜色的标记)。
    *   在信号列表中显示所有触发的交易信号。
    *   允许用户对信号进行过滤、排序、标记等操作。
    *   点击信号可以查看信号的详细信息 (例如：触发时间、触发条件、相关指标值等)。

*   **3.5.4 账户信息展示 (模拟)**
    *   显示模拟账户的余额、持仓、盈亏等信息。
    *   显示模拟交易的交易记录。

*   **3.5.5 交易记录查询**
    *   允许用户查询历史交易记录 (包括模拟交易和真实交易)。
    *   支持按时间、股票代码、交易方向等条件进行筛选。

*   **3.5.6 参数配置**
    *   允许用户配置各种参数，包括：
        *   技术指标参数
        *   AI 模型参数
        *   交易策略参数
        *   风险控制参数
        *   股票筛选条件
        *   ... (其他参数)

*   **3.5.7 股票池**
    *   展示当日符合筛选条件的股票列表。
    *   提供股票的快速对比功能 (例如：技术指标对比、AI 模型评分对比、基本面数据对比)。
    *   允许用户将股票添加到自选股列表。

*   **3.5.8 交易信号管理**
    *   集中展示所有触发的交易信号。
    *   允许用户对信号进行标记 (例如：已读、未读、重要、忽略)。
    *   允许用户对信号进行过滤 (例如：只显示买入信号、只显示某个股票的信号)。
    *   允许用户对信号进行排序 (例如：按时间排序、按重要性排序)。

*   **3.5.9 图表增强**
    *   提供更多交互式工具 (例如：画线、标注、添加自定义指标、添加文本注释)。
    *   支持多图表对比 (例如：同一股票的不同时间周期、不同股票的对比、同一股票的不同指标对比)。
    *   支持图表的拖拽、缩放、滚动等操作。

*   **3.5.10 自定义工作区**
    *   允许用户根据自己的习惯和需求定制界面布局 (例如：调整各个模块的位置和大小)。
    *   允许用户自定义图表显示 (例如：选择要显示的图表类型、指标、时间周期)。
    *   允许用户自定义指标参数。
    *   可以保存多个工作区，方便快速切换。
    *  用户可以导出和导入工作区设置。

*   **3.5.11 消息中心**
     *  集中展示各种系统消息和交易信号的通知
     *  用户可以配置不同消息类型的通知方式

## 4. 技术选型

*   **编程语言:** Python (主要用于数据分析、AI 模型、交易策略) + Go (主要用于高性能的数据处理、实时数据接收、模拟交易执行)
*   **数据库:** MySQL
*   **数据库管理工具:** Navicat
*   **量化交易框架:**
    *   Python: Backtrader, Zipline, vn.py (可根据需求选择, 考虑到是辅助交易系统, 可以选择更轻量级的框架或自行开发)
    *   Go: 考虑自行开发，或使用一些开源库 (例如：用于 TA-Lib 指标计算的库)
*   **AI 框架:** TensorFlow, PyTorch, scikit-learn
*   **消息队列:** (可选) Kafka, RabbitMQ (用于异步处理数据、解耦系统模块, 考虑到是辅助交易系统, 可以不使用)
*   **容器化:** (可选) Docker, Kubernetes (用于部署和管理系统)
* **前端框架**: (可选) React, Vue.js, 或 PyQt 等

好的，继续完善开发流程部分：

## 5. 开发流程

1.  **数据准备:**
    *   确认历史数据字段和格式。
    *   完成历史数据清洗。
    *   建立与 Polygon 的实时数据连接 (WebSocket 和 REST API)。
    *   开发数据读取和预处理模块 (Python)。
    *   开发实时数据接收和处理模块 (Go)。

2.  **技术分析模块开发 (Python/Go):**
    *   实现常用技术指标计算 (Go, 考虑性能)。
    *   实现自定义指标接口 (Python/Go)。
    *   实现基于指标的信号生成 (Python)。
    *   实现 K 线形态和图表形态识别 (Python)。
    *   实现信号组合和过滤功能 (Python)。
    *  编写单元测试用例

3.  **AI 模型模块开发 (Python):**
    *   特征工程:
        *   提取基础特征和衍生特征。
        *   进行特征选择。
    *   模型选择和训练:
        *   选择合适的模型。
        *   划分数据集。
        *   训练模型。
        *   进行模型评估。
        *   进行模型调优 (手动/自动)。
        *   保存训练好的模型。
    *   模型预测:
        *   开发模型预测模块。
        *   实现模型输出 (概率/评分、置信度、特征重要性)。
    *   股票筛选:
        *   实现预设的选股策略。
        *   实现自定义筛选功能。
    *  编写单元测试与集成测试

4.  **交易执行模块 (模拟) 开发 (Go):**
    *   实现模拟交易环境。
    *   实现模拟订单管理。
    *   实现模拟风险控制。
    *   实现交易记录和报告生成。
    *   实现交易信号推送 (界面弹窗、声音提示)。
    *  编写单元测试

5.  **用户界面开发 (Python/可选前端框架):**
    *   设计 UI 原型。
    *   实现实时行情展示。
    *   实现技术指标展示。
    *   实现交易信号展示和管理。
    *   实现模拟账户信息展示。
    *   实现交易记录查询。
    *   实现参数配置功能。
    *   实现股票池功能。
    *   实现图表增强功能。
    *   实现自定义工作区功能。
    *   实现消息中心
    *   进行用户体验测试和优化。

6.  **系统集成和测试:**
    *   整合各个模块 (数据模块、技术分析模块、AI 模型模块、模拟交易模块、用户界面)。
    *   进行全面的系统测试:
        *   **单元测试:** 针对每个模块的独立功能进行测试。
        *   **集成测试:** 测试各个模块之间的交互。
        *   **系统测试:** 从用户角度进行端到端的测试。
        *   **回测:** 使用历史数据对交易策略进行回测。
        *   **模拟交易测试:** 在模拟环境中进行真实交易场景的测试。
        *   **性能测试:** 测试系统的性能 (例如：数据处理速度、响应时间、并发量)。
        *   **稳定性测试:** 测试系统的稳定性 (例如：长时间运行是否会出现错误)。
        *   **安全性测试:** 测试系统的安全性 (例如：防止数据泄露、防止恶意攻击)。

7.  **部署和监控:**
    *   将系统部署到服务器 (本地服务器或云服务器)。
    *   配置服务器环境 (安装必要的软件和依赖)。
    *   设置系统监控 (数据监控、模型监控、交易监控、异常报警)。
    *   编写部署文档和操作手册。

8.  **持续优化:**
    *   根据实际交易 performance (模拟交易或真实交易), 不断优化交易策略和模型。
    *   收集用户反馈, 不断改进用户界面和用户体验。
    *   定期更新系统,修复 bug, 添加新功能。
    *   跟踪最新的量化交易技术和 AI 技术, 及时应用到系统中。

**开发流程补充说明:**

*   **敏捷开发:** 采用敏捷开发方法, 将整个项目分解为多个小的迭代周期 (例如：每周一个迭代)。每个迭代周期都包含需求分析、设计、开发、测试和部署等环节。
*   **版本控制:** 使用 Git 进行版本控制, 方便代码管理和团队协作。
*   **代码规范:** 遵循统一的代码规范 (例如：PEP 8 for Python, Go 官方代码规范), 提高代码的可读性和可维护性。
*   **文档:** 编写详细的开发文档、用户文档和 API 文档。
*   **团队协作:** 使用项目管理工具 (例如：Jira, Trello) 进行任务分配和跟踪。

## 6. 风险提示

*   **市场风险:** 量化交易并不能保证盈利，市场波动可能导致亏损。
*   **模型风险:** AI 模型的预测并非 100% 准确，可能出现误判。
*   **技术风险:** 系统故障、网络中断等可能导致交易失败或延迟。
*   **监管风险:** 量化交易可能受到监管政策的影响。
*   **过拟合风险：** 模型在训练数据上表现良好，但在新数据上表现不佳.
*   **数据风险：** 数据错误，缺失，偏差等可能导致模型训练出错误的结果。
*  **流动性风险：** 对于交易量小的股票，可能存在买卖困难的情况，

